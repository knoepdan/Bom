@{
    bool isDebug = false;
#if DEBUG
    isDebug = true;
#endif


    var relativeBaseUrl = Url.Content("~")?.TrimEnd('/') + "/"; // "/BomApi/"
    var request = Url.ActionContext.HttpContext.Request;
    var fullBaseUrl =  new Uri(new Uri(request.Scheme + "://" + request.Host.Value), relativeBaseUrl).ToString().TrimEnd('/')+"/"; // "https://localhost/BomApi"

    // spa referneces are no longer injected directly into html but in a separate file that is being watched (introduces since razor reload doesnt work anymore)
    //<script defer src="app/runtime~index.667000cca92321d79f2c.js"></script><script defer src="app/vendor.1df9e5853abde28bd7f1.js"></script><script defer src="app/index.0f0b391814a7228f5c2c.js"></script></body>
    var spaReferences = Bom.Web.Startup.SpaReferencesWatcher();
    string htmlReferences = spaReferences.GetContent();
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bom</title>
    <base href="@fullBaseUrl" data-href="@relativeBaseUrl" />
    <link rel="stylesheet" href="/css/bundle.css" />
</head>
<body class="overallBody">
    @RenderBody()

    @if (isDebug) {
        // attention: certificate might be invalid. Browsers usually have an option to allow invalid certificates from localhost > enable it ( example for edge: edge://flags/#allow-insecure-localhost)
        <script id = "__bs_script__" >
             //<![CDATA[
             document.write("<script async src='https://HOST:3000/browser-sync/browser-sync-client.js?v=2.26.7'><\/script>".replace("HOST", location.hostname));
            //]]>
            </script>
    }
    @Html.Raw(htmlReferences)
</body>
</html>